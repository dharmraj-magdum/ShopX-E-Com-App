"""
Django settings for shopX_project project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import dj_database_url
from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv("MODE"):
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop',
    'users',
    "storages",
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]
# /-------/
CORS_ORIGIN_ALLOW_ALL = True


ROOT_URLCONF = 'shopX_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shopX_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# local/development
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# online/Production database----------
# with basic (like AWS)DB instance formal connection
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': os.getenv("DB_NAME"),
#         'USER': os.getenv("DB_USER"),
#         'PASSWORD': os.getenv("DB_PASS"),
#         'HOST': os.getenv("DB_HOST"),
#         'PORT': os.getenv("DB_PORT"),
#     }
# }
# simple automated data with url (render DB)
if os.getenv("MODE"):
    DATABASES = {
        'default': dj_database_url.parse(os.getenv("DB_URL_EX"))
    }
else:
    DATABASES = {
        'default': dj_database_url.parse(os.getenv("DB_URL_IN"))
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

if os.getenv("MODE"):
   # # developement
    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, "static"),
    )
else:
    # production
    STATIC_ROOT = os.path.join(BASE_DIR, "static")


STATIC_URL = "/static/"


# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# upload and access of files within project (local development)
# this will say django to store upload pics to mentioned  folder
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# the path to access stored pics
# MEDIA_URl = '/media/'

LOGIN_URL = "user-login"
LOGIN_REDIRECT_URL = "home-page"

# //password-reset related
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


# ///for aws bucket storage
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_QUERYSTRING_AUTH = os.getenv("AWS_QUERYSTRING_AUTH ")
# //-----addition
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
# ----defalut storage system for django
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# static files like css and js this say djnago to see storage for static files as s3
# STORAGES = {"staticfiles": {
#     "BACKEND": "storages.backends.s3boto3.S3StaticStorage"}}
# //we want to store css and js just in project to change easily


#   ENV /////////////////////////---------------------------

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-0v8s2izcr@t$uog)v%^qsr_arhmub2rx6#tt#0pw%&#k2u9+re'
SECRET_KEY = 'django-insecure-0v8s2izcr@t$uog)v%^qsr_arhmub2rx6#tt#0pw%&#k2u9+re'

# #External Database URL (accessing from outside render)
DB_PORT=5432
DB_HOST="database-1.cksby9mrecf8.us-west-1.rds.amazonaws.com"
DB_NAME="shopX"
DB_USER="postgres"
DB_PASS="postgres"

#external storage aws s3----------------
AWS_STORAGE_BUCKET_NAME="dkmawsbucket"
AWS_ACCESS_KEY_ID="AKIARXTY2EVYEM5T3Q7Q"
AWS_SECRET_ACCESS_KEY="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"
# not any auth for query
AWS_QUERYSTRING_AUTH=False 

#////////////////////
MODE="DEV"